name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-lite:
    name: Build and Release Lite 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Check out Repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-lite
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Build and push release image
        uses: docker/build-push-action@v4
        with:
          context: ./lite
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  release-web:
    name: Build and Release Pro
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Check out Repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'
      - 
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Build and push release image
        uses: docker/build-push-action@v4
        with:
          context: ./web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  
  release-desktop:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      -
        name: Check out Git repository
        uses: actions/checkout@v4
      - 
        name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v4
        with:
          node-version: 20
      -
        name: Install node dependencies 
        run: |
          cd desktop
          npm install
      -
        name: Build Electron app
        run: |
          cd desktop
          npm run build-electron
      -
        name: Package Electron app
        run: |
          cd desktop
          npm run dist-electron
      -
        name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: electron-app
          path: dist/
      -
        name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      -
        name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: electron-app-${{ matrix.os }}.zip
          asset_content_type: application/zip